import { IDL } from "./idl/whitehat";
import { Connection, Keypair, PublicKey, SystemProgram } from "@solana/web3.js";
import sender from "./sender.json";
import {
  Address,
  AnchorProvider,
  BN,
  Program,
  Wallet,
} from "@coral-xyz/anchor";
import fs from "fs";
import { Ed25519Ecies } from "@whitehat-xyz/ed25519-ecies";

const PROGRAM_ID = "HATNBZtwk8uLUZeSuYK8QYwWzk1kT5didcGFs9a6GtTW";

// fill these from the /explore page
const PROGRAM_OWNER = "7sydHcmax59DZJ523tFQEakwkJ3vBDWUE64auHy7yn1N";
const PROGRAM_ENCRYPTION = "8Pvnq8PS66Kg6XGvwMBqKX9j7UAvD5XLiPNV9yTPs8AQ";

// defined by the hacker to get paid
const PAYOUT = "3MDmFxEzc6PxFpM72H95PhxygK4f3gaSbKkr4R1dP3jz";

const keypair = Keypair.fromSecretKey(new Uint8Array(sender));

const connection = new Connection("https://api.devnet.solana.com");

const provider = new AnchorProvider(connection, new Wallet(keypair), {
  commitment: "confirmed",
});

const program = new Program(IDL, PROGRAM_ID as Address, provider);

function getRandomInt(max: number) {
  return Math.floor(Math.random() * max);
}

(async () => {
  try {
    const msg = fs.readFileSync("./message.txt", {
      encoding: "utf8",
      flag: "r",
    });

    console.log(msg);

    const seed = new BN(getRandomInt(1337));

    const protocol = PublicKey.findProgramAddressSync(
      [Buffer.from("protocol"), new PublicKey(PROGRAM_OWNER).toBuffer()],
      program.programId
    )[0];

    // @ts-ignore
    const protocolPda = await program.account.protocol.fetch(protocol);

    const vulnerability = PublicKey.findProgramAddressSync(
      // b"vulnerability", protocol.key().as_ref(), id.to_le_bytes().as_ref(), seed.to_le_bytes().as_ref()
      [
        Buffer.from("vulnerability"),
        protocol.toBytes(),
        new BN(protocolPda.vulnerabilities.toNumber() + 1).toArrayLike(
          Buffer,
          "le",
          8
        ),
        seed.toArrayLike(Buffer, "le", 8),
      ],
      program.programId
    )[0];

    const text = await Ed25519Ecies.encrypt(
      Buffer.from(msg),
      new PublicKey(PROGRAM_ENCRYPTION).toBuffer()
    );

    const tx = await program.methods
      .reportVulnerability(
        Buffer.from(text),
        new BN(protocolPda.vulnerabilities.toNumber() + 1),
        seed
      )
      .accounts({
        signer: keypair.publicKey,
        payout: new PublicKey(PAYOUT),
        protocol,
        vulnerability,
        systemProgram: SystemProgram.programId,
      })
      .signers([keypair])
      .rpc()
      .then(async () => {
        console.log(
          `here's your vulnerability pda address (you'll need it later) :\n${vulnerability.toString()}`
        );
      });
    console.log(`Success! Check out your TX here:
      https://explorer.solana.com/tx/${tx}?cluster=devnet`);
  } catch (error) {
    console.log(error);
  }
})();
