use crate::{
    errors::ErrorCode,
    program::Whitehat,
    state::{Exploit, Protocol},
};
use anchor_lang::prelude::*;
use anchor_spl::associated_token::AssociatedToken;
use anchor_spl::token::{transfer, Mint, Token, TokenAccount, Transfer};

#[derive(Accounts)]
#[instruction(amount: u64)]
pub struct ExploitSPLApprove<'info> {
    #[account(mut, address=protocol.owner @ ErrorCode::SignerNotProtocolOwner)]
    pub owner: Signer<'info>,
    #[account(address=Whitehat::id() @ ErrorCode::WrongProgramID)]
    pub program_data: Account<'info, ProgramData>,
    #[account(
        init_if_needed,
        associated_token::mint = mint,
        associated_token::authority = owner,
        payer = owner,
    )]
    owner_ata: Account<'info, TokenAccount>,
    #[account(
        init_if_needed,
        associated_token::mint = mint,
        associated_token::authority = owner,
        payer = owner,
    )]
    fees: Account<'info, TokenAccount>,
    #[account(
        mut,
        address=exploit.payout
    )]
    payout: Account<'info, TokenAccount>,
    mint: Account<'info, Mint>,
    #[account(
        seeds = [b"auth", protocol.key().as_ref()],
        bump = protocol.auth_bump
    )]
    /// CHECK: This is safe
    auth: UncheckedAccount<'info>,
    #[account(
        mut,
        close = owner,
        seeds = [b"spl", protocol.key().as_ref(), exploit.key().as_ref()],
        token::mint = mint,
        token::authority = auth,
        bump
    )]
    vault: Account<'info, TokenAccount>,
    #[account(
        mut,
        seeds = [b"protocol", protocol.owner.as_ref()],
        bump = protocol.state_bump,
    )]
    pub protocol: Account<'info, Protocol>,
    #[account(
        mut,
        close = owner_ata,
        seeds = [b"exploit", protocol.key().as_ref(), amount.to_le_bytes().as_ref(), mint.key().as_ref()],
        bump = exploit.bump,
    )]
    pub exploit: Account<'info, Exploit>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub system_program: Program<'info, System>,
}

impl<'info> ExploitSPLApprove<'info> {
    pub fn exploit_spl_approve(&mut self) -> Result<()> {
        let exploit = &mut self.exploit;

        let protocol = &mut self.protocol;
        protocol.delay = (protocol.delay + (Clock::get()?.unix_timestamp - exploit.created_at)) / 2;

        let fee = exploit.amount / 100;

        let amount = (protocol.percent * exploit.amount / 100) - fee;
        protocol.paid += amount;

        let seeds = &[
            b"auth",
            self.protocol.to_account_info().key.as_ref(),
            &[self.protocol.auth_bump],
        ];

        let signer_seeds = &[&seeds[..]];

        let whitehat_accounts = Transfer {
            from: self.vault.to_account_info(),
            to: self.payout.to_account_info(),
            authority: self.auth.to_account_info(),
        };

        let whitehat_cpi = CpiContext::new_with_signer(
            self.token_program.to_account_info(),
            whitehat_accounts,
            signer_seeds,
        );

        transfer(whitehat_cpi, amount)?;

        let fee_accounts = Transfer {
            from: self.vault.to_account_info(),
            to: self.fees.to_account_info(),
            authority: self.auth.to_account_info(),
        };

        let fee_cpi = CpiContext::new_with_signer(
            self.token_program.to_account_info(),
            fee_accounts,
            signer_seeds,
        );

        transfer(fee_cpi, amount)?;

        let owner_accounts = Transfer {
            from: self.vault.to_account_info(),
            to: self.owner_ata.to_account_info(),
            authority: self.auth.to_account_info(),
        };

        let owner_cpi = CpiContext::new_with_signer(
            self.token_program.to_account_info(),
            owner_accounts,
            signer_seeds,
        );

        transfer(owner_cpi, amount)?;

        Ok(())
    }
}
