use crate::{
    errors::ErrorCode,
    state::{Exploit, Protocol, Vulnerability},
};
use anchor_lang::prelude::*;
use anchor_spl::associated_token::AssociatedToken;
use anchor_spl::token::{transfer, Mint, Token, TokenAccount, Transfer};
use std::collections::BTreeMap;

#[derive(Accounts)]
#[instruction(amount: u64)]
pub struct ExploitSPLDeposit<'info> {
    #[account(mut)]
    pub signer: Signer<'info>,
    #[account()]
    pub payout: SystemAccount<'info>,
    #[account(
        mut,
        associated_token::mint = mint,
        associated_token::authority = signer,
    )]
    signer_ata: Account<'info, TokenAccount>,
    mint: Account<'info, Mint>,
    #[account(
        seeds = [b"auth", protocol.key().as_ref()],
        bump = protocol.auth_bump
    )]
    /// CHECK: This is safe
    auth: UncheckedAccount<'info>,
    #[account(
        init_if_needed,
        payer = signer,
        seeds = [b"spl", protocol.key().as_ref(), exploit.key().as_ref()],
        token::mint = mint,
        token::authority = auth,
        bump
    )]
    vault: Account<'info, TokenAccount>,
    #[account(
        executable
    )]
    /// CHECK: we will deserialize manually.
    pub program: AccountInfo<'info>,
    #[account(
        executable,
        constraint = protocol.programs.iter().any(|i| i.program == program.key()) @ ErrorCode::ProgramNotInProtocolList
    )]
    pub program_data: Account<'info, ProgramData>,
    #[account(
        mut,
        seeds = [b"protocol", protocol.owner.as_ref()],
        bump = protocol.state_bump,
    )]
    pub protocol: Box<Account<'info, Protocol>>,
    #[account(
        has_one = payout,
        seeds = [b"vulnerability", protocol.key().as_ref(), vulnerability.id.to_le_bytes().as_ref(), vulnerability.seed.to_le_bytes().as_ref()],
        bump = vulnerability.bump,
    )]
    pub vulnerability: Box<Account<'info, Vulnerability>>,
    #[account(
        init,
        payer = signer,
        seeds = [b"exploit", protocol.key().as_ref(), amount.to_le_bytes().as_ref(), mint.key().as_ref()],
        bump,
        space = Exploit::LEN
    )]
    pub exploit: Box<Account<'info, Exploit>>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub system_program: Program<'info, System>,
}

impl<'info> ExploitSPLDeposit<'info> {
    pub fn exploit_sol_deposit(&mut self, bumps: &BTreeMap<String, u8>, amount: u64) -> Result<()> {
        let exploit = &mut self.exploit;

        // pub payout: Pubkey,
        // pub protocol: Pubkey,
        // pub value: u64,
        // pub reviewed: bool,
        // pub created_at: i64,
        // pub bump: u8,
        // pub seed: u64,

        exploit.payout = self.payout.key();
        exploit.mint = self.mint.key();
        exploit.protocol = self.protocol.key();
        exploit.amount = amount;
        exploit.bump = *bumps.get("exploit").unwrap();
        exploit.created_at = Clock::get()?.unix_timestamp;

        let protocol = &mut self.protocol;

        protocol.exploits += 1;

        let accounts = Transfer {
            from: self.signer_ata.to_account_info(),
            to: self.vault.to_account_info(),
            authority: self.signer.to_account_info(),
        };

        let cpi = CpiContext::new(self.token_program.to_account_info(), accounts);

        transfer(cpi, amount)
    }
}
