use crate::state::{Analytics, Protocol, Vulnerability};
use anchor_lang::prelude::*;

#[derive(Accounts)]
pub struct VulnerabilityApprove<'info> {
    #[account(mut)]
    pub owner: Signer<'info>,
    #[account(
        has_one = owner,
        seeds = [b"protocol", protocol.owner.as_ref()],
        bump = protocol.state_bump,
    )]
    pub protocol: Account<'info, Protocol>,
    #[account(
        mut,
        has_one = protocol,
        seeds = [b"vulnerability", protocol.key().as_ref(), vulnerability.id.to_le_bytes().as_ref(), vulnerability.seed.to_le_bytes().as_ref()],
        bump = vulnerability.bump,
    )]
    pub vulnerability: Account<'info, Vulnerability>,
    #[account(
        mut,
        seeds = [b"analytics"],
        bump = analytics.state_bump,
    )]
    pub analytics: Account<'info, Analytics>,
}

impl<'info> VulnerabilityApprove<'info> {
    pub fn vulnerability_approve(&mut self) -> Result<()> {
        let vulnerability = &mut self.vulnerability;
        vulnerability.reviewed = true;
        let protocol = &mut self.protocol;
        protocol.delay = (protocol.delay + (Clock::get()?.unix_timestamp - vulnerability.created_at)) / 2;
        Ok(())
    }
    pub fn update_analytics(&mut self) -> Result<()> {
        let analytics = &mut self.analytics;
        analytics.vulnerabilities += 1;
        Ok(())
    }
}
