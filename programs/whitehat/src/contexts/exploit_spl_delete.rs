use crate::{
    errors::ErrorCode,
    program::Whitehat,
    state::{Exploit, Protocol},
};
use anchor_lang::prelude::*;
use anchor_spl::associated_token::AssociatedToken;
use anchor_spl::token::{Mint, Token, TokenAccount};

#[derive(Accounts)]
#[instruction(amount: u64)]
pub struct ExploitSPLDelete<'info> {
    #[account(mut)]
    pub owner: Signer<'info>,
    #[account(
        executable,
        address=Whitehat::id() @ ErrorCode::WrongProgramID
    )]
    pub program_data: Account<'info, ProgramData>,
    #[account(
        mut,
        associated_token::mint = mint,
        associated_token::authority = owner,
    )]
    owner_ata: Account<'info, TokenAccount>,
    mint: Account<'info, Mint>,
    #[account(
        mut,
        close = owner,
        seeds = [b"spl", protocol.key().as_ref(), exploit.key().as_ref()],
        token::mint = mint,
        token::authority = vault,
        bump
    )]
    vault: Account<'info, TokenAccount>,
    #[account(
        mut,
        seeds = [b"protocol", protocol.owner.as_ref()],
        bump = protocol.state_bump,
    )]
    pub protocol: Account<'info, Protocol>,
    #[account(
        mut,
        close = owner_ata,
        seeds = [b"exploit", protocol.key().as_ref(), amount.to_le_bytes().as_ref(), mint.key().as_ref()],
        bump = exploit.bump,
    )]
    pub exploit: Account<'info, Exploit>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub system_program: Program<'info, System>,
}

impl<'info> ExploitSPLDelete<'info> {
    pub fn exploit_spl_delete(&mut self) -> Result<()> {
        Ok(())
    }
}
