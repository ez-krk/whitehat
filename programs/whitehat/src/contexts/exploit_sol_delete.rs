use crate::{
    errors::ErrorCode,
    program::Whitehat,
    state::{Analytics, Exploit, Protocol},
};
use anchor_lang::prelude::*;

#[derive(Accounts)]
pub struct ExploitSolDelete<'info> {
    #[account(mut)]
    pub owner: Signer<'info>,
    #[account(address=Whitehat::id() @ ErrorCode::WrongProgramID)]
    pub program_data: Account<'info, ProgramData>,
    #[account(
        mut,
        seeds = [b"protocol", protocol.owner.key().as_ref()],
        bump = protocol.state_bump,
    )]
    pub protocol: Account<'info, Protocol>,
    #[account(
        mut,
        close = owner,
        has_one = protocol,
        seeds = [b"exploit", protocol.key().as_ref(), exploit.amount.to_le_bytes().as_ref()],
        bump = exploit.bump,
    )]
    pub exploit: Account<'info, Exploit>,
    #[account(
        mut,
        seeds = [b"analytics"],
        bump = analytics.state_bump,
    )]
    pub analytics: Account<'info, Analytics>,
    pub system_program: Program<'info, System>,
}

impl<'info> ExploitSolDelete<'info> {
    pub fn exploit_sol_delete(&mut self) -> Result<()> {
        Ok(())
    }
}
