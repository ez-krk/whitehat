use crate::{
    errors::ErrorCode,
    program::Whitehat,
    state::{Analytics, Exploit, Protocol},
};
use anchor_lang::prelude::*;
use anchor_lang::system_program::{transfer, Transfer};

#[derive(Accounts)]
pub struct ExploitSolApprove<'info> {
    #[account(mut)]
    pub owner: Signer<'info>,
    #[account(address=Whitehat::id() @ ErrorCode::WrongProgramID)]
    pub program_data: Account<'info, ProgramData>,
    #[account(
        seeds = [b"auth", protocol.key().as_ref()],
        bump = protocol.auth_bump
    )]
    /// CHECK: This is safe
    auth: UncheckedAccount<'info>,
    #[account(
        mut,
        seeds = [b"vault", protocol.key().as_ref()],
        bump = protocol.vault_bump
    )]
    vault: SystemAccount<'info>,
    #[account(
        mut,
        address=program_data.upgrade_authority_address.unwrap()
    )]
    fees: SystemAccount<'info>,
    #[account(
        mut,
        has_one = owner,
        seeds = [b"protocol", owner.key().as_ref()],
        bump = protocol.state_bump,
    )]
    pub protocol: Account<'info, Protocol>,
    #[account(
        mut,
        address=exploit.payout
    )]
    pub payout: SystemAccount<'info>,
    #[account(
        mut,
        has_one = protocol,
        has_one = payout,
        seeds = [b"exploit", protocol.key().as_ref(), exploit.amount.to_le_bytes().as_ref()],
        bump = exploit.bump,
    )]
    pub exploit: Account<'info, Exploit>,
    #[account(
        mut,
        seeds = [b"analytics"],
        bump = analytics.state_bump,
    )]
    pub analytics: Account<'info, Analytics>,
    pub system_program: Program<'info, System>,
}

impl<'info> ExploitSolApprove<'info> {
    pub fn exploit_sol_approve(&mut self) -> Result<()> {
        let exploit = &mut self.exploit;

        let protocol = &mut self.protocol;
        protocol.delay = (protocol.delay + (Clock::get()?.unix_timestamp - exploit.created_at)) / 2;

        // pub payout: Pubkey,
        // pub protocol: Pubkey,
        // pub value: u64,
        // pub reviewed: bool,
        // pub created_at: i64,
        // pub bump: u8,
        // pub seed: u64,

        // hack amount = 100 %
        // due amount = protocol %
        // due amount = protocol % * amount / 100

        let fee = exploit.amount / 100;

        let amount = (protocol.percent * exploit.amount / 100) - fee;
        protocol.paid += amount;

        let seeds = &[
            b"vault",
            self.protocol.to_account_info().key.as_ref(),
            &[self.protocol.vault_bump],
        ];

        let signer_seeds = &[&seeds[..]];

        let whitehat_accounts = Transfer {
            from: self.vault.to_account_info(),
            to: self.payout.to_account_info(),
        };

        let whitehat_cpi = CpiContext::new_with_signer(
            self.system_program.to_account_info(),
            whitehat_accounts,
            signer_seeds,
        );

        transfer(whitehat_cpi, amount)?;

        let fee_accounts = Transfer {
            from: self.vault.to_account_info(),
            to: self.fees.to_account_info(),
        };

        let fee_cpi = CpiContext::new_with_signer(
            self.system_program.to_account_info(),
            fee_accounts,
            signer_seeds,
        );
        transfer(fee_cpi, fee)?;

        let owner_accounts = Transfer {
            from: self.vault.to_account_info(),
            to: self.owner.to_account_info(),
        };

        let owner_cpi = CpiContext::new_with_signer(
            self.system_program.to_account_info(),
            owner_accounts,
            signer_seeds,
        );

        let owner_amount = exploit.amount - (amount + fee);
        transfer(owner_cpi, owner_amount)
    }

    pub fn update_analytics(&mut self) -> Result<()> {
        let analytics = &mut self.analytics;
        let exploit = &mut self.exploit;
        let protocol = &mut self.protocol;

        let amount = protocol.percent * exploit.amount / 100;

        analytics.hacks += 1;
        analytics.sol_recovered += exploit.amount;
        analytics.sol_paid += amount;
        analytics.fees += exploit.amount / 100;
        Ok(())
    }
}
